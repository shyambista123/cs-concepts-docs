{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Project","text":"<p>This project covers a range of technical concepts including:</p> <ul> <li>Algorithms</li> <li>Data Structures</li> <li>Programming Languages</li> <li>Frameworks</li> <li>Cyber Security</li> <li>Machine Learning</li> <li>Web Scraping</li> </ul> <p>Make sure to review the Code of Conduct, Contribution Guidelines, and Security Rules.</p>"},{"location":"CODE_OF_CONDUCT/","title":"Code of Conduct","text":""},{"location":"CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>We pledge to make participation in our project a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include: - Using welcoming and inclusive language - Being respectful of differing viewpoints and experiences - Gracefully accepting constructive criticism - Focusing on what is best for the community - Showing empathy towards other community members</p> <p>Examples of unacceptable behavior by participants include: - The use of sexualized language or imagery and unwelcome sexual attention or advances - Trolling, insulting/derogatory comments, and personal or political attacks - Public or private harassment - Publishing others' private information, such as a physical or electronic address, without explicit permission - Other conduct which could reasonably be considered inappropriate in a professional setting</p>"},{"location":"CODE_OF_CONDUCT/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [your-email@example.com]. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. </p>"},{"location":"CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct/.</p>"},{"location":"CONTRIBUTING/","title":"Contributing to CS Concepts Docs","text":"<p>We welcome contributions from everyone! Here\u2019s how you can contribute:</p> <ol> <li>Fork the repository: Click the \"Fork\" button at the top right of the page.</li> <li>Clone your fork:     <code>bash    git clone https://github.com/shyambista123/cs-concepts-docs.git</code></li> <li>Create a new branch:    <code>bash    git checkout -b your-branch-name</code></li> <li>Add your concept: Create a new markdown file in the appropriate directory under <code>concepts/</code> and follow the rules outlined in RULES.md.</li> <li>Submit a pull request: Push your changes and submit a pull request.</li> </ol> <p>Thank you for contributing!</p>"},{"location":"PULL_REQUEST_TEMPLATE/","title":"Pull Request","text":""},{"location":"PULL_REQUEST_TEMPLATE/#description","title":"Description","text":"<p>A collaborative repository for documenting fundamental computer science concepts, algorithms, and data structures. Please provide a summary of the changes you are making in this pull request, including details about the concepts, algorithms, or data structures you are adding or modifying.</p>"},{"location":"PULL_REQUEST_TEMPLATE/#related-issue","title":"Related Issue","text":"<p>If this pull request addresses a specific topic or issue, please link to it here.</p>"},{"location":"PULL_REQUEST_TEMPLATE/#changes-made","title":"Changes Made","text":"<p>List the changes you have made in this pull request. For example: - Added new concepts or topics - Updated explanations or examples - Fixed formatting or structural issues</p>"},{"location":"PULL_REQUEST_TEMPLATE/#conformance-to-contribution-rules","title":"Conformance to Contribution Rules","text":"<p>To maintain consistency and quality in our documentation, please ensure your changes adhere to the following rules:</p> <ol> <li> <p>Avoid Duplicates: Check existing files to ensure the concept is not already covered.</p> </li> <li> <p>File Naming: Use lowercase letters and hyphens for file names (e.g., <code>quick-sort.md</code>).</p> </li> <li> <p>Format: Follow this structure for each markdown file:</p> </li> <li><code># Concept Title</code></li> <li><code>## Description</code></li> <li><code>## Examples</code></li> <li> <p><code>## References</code></p> </li> <li> <p>Adding Content:</p> </li> <li> <p>Enhance the content of existing markdown files or create new files for uncovered concepts.</p> </li> <li> <p>Links:</p> </li> <li>Include links only in files you create, such as references or further reading.</li> <li>Do not add links to existing files; they should remain focused on the content.</li> <li> <p>You can include links to your social media profiles in the contributor information section at the bottom of new markdown files.</p> </li> <li> <p>Contributor Information:</p> </li> <li>At the bottom of each new markdown file, include your name and links to your profiles:<ul> <li>Contributor: Your Name  </li> <li>GitHub | LinkedIn | X</li> </ul> </li> </ol>"},{"location":"PULL_REQUEST_TEMPLATE/#how-to-test","title":"How to Test","text":"<p>Describe any steps to review or test your changes, if applicable.</p>"},{"location":"PULL_REQUEST_TEMPLATE/#checklist","title":"Checklist","text":"<ul> <li>[ ] I have read and followed the Contribution Rules.</li> <li>[ ] My content follows the existing style and formatting guidelines.</li> <li>[ ] I have ensured that the new content is accurate and well-structured.</li> <li>[ ] I have included contributor information at the bottom of new markdown files.</li> </ul>"},{"location":"PULL_REQUEST_TEMPLATE/#additional-information","title":"Additional Information","text":"<p>Add any other relevant information or context for this pull request.</p> <p>Thank you for contributing to our collaborative repository and helping others learn and grow in computer science!</p>"},{"location":"RULES/","title":"RULES","text":""},{"location":"RULES/#rulesmd","title":"<code>RULES.md</code>","text":""},{"location":"RULES/#contribution-rules","title":"Contribution Rules","text":"<p>To maintain the quality and organization of the project, please follow these rules:</p> <ol> <li> <p>Avoid Duplicates: Before adding a new concept, check existing files to ensure the topic isn\u2019t already covered.</p> </li> <li> <p>File Naming: Use lowercase letters and hyphens for file names (e.g., <code>quick-sort.md</code>).</p> </li> <li> <p>Format: Each markdown file should follow this structure:    # Concept Title</p> </li> </ol> <p>## Description    Brief explanation of the concept.</p> <p>## Examples    Include code snippets or examples if applicable.</p> <p>## References    Any references or links to further reading.</p> <ol> <li>Adding Content:</li> <li>You can contribute by enhancing the content of existing markdown files.</li> <li> <p>You may also create new files for concepts that are not already covered.</p> </li> <li> <p>Links:</p> </li> <li>You can only include links in files that you create yourself, such as links to references or further reading.</li> <li>Do not add links in existing files; they should remain focused on the content.</li> <li> <p>You can include links to your social media profiles in the contributor information section at the bottom of each markdown file.</p> </li> <li> <p>Contributor Information: At the bottom of each markdown file, include your name and links to your profiles:    Contributor: Your Name GitHub | LinkedIn | X</p> </li> </ol> <p>Happy contributing!</p>"},{"location":"SECURITY/","title":"Security Policy","text":""},{"location":"SECURITY/#reporting-issues","title":"Reporting Issues","text":"<p>If you notice any issues with the documentation that might impact its integrity, please raise an issue on our GitHub Issues page.</p>"},{"location":"SECURITY/#reporting-guidelines","title":"Reporting Guidelines","text":"<ul> <li>Confidentiality: Avoid disclosing any potential issues publicly until they are addressed.</li> <li>Details: Provide a clear description of the issue.</li> <li>Reproduction: If applicable, include steps to reproduce the issue or examples of the problem.</li> </ul>"},{"location":"SECURITY/#handling-reports","title":"Handling Reports","text":"<p>We will review and address any reported issues as promptly as possible.</p> <p>Thank you for helping us maintain the quality of our documentation!</p>"},{"location":"concepts/algorithms/","title":"Algorithms","text":"<p>This section covers important algorithms:</p> <ul> <li>Searching Algorithms</li> <li>Sorting Algorithms</li> </ul> <p>Go back to Home.</p>"},{"location":"concepts/algorithms/searching/","title":"Searching Algorithms","text":"<p>This file covers different searching algorithms.</p> <p>Searching algorithms are techniques used to find a specific item in a collection of data. They can be categorized into various types, such as linear search and binary search. Below, we will explore some of the most common searching algorithms, their applications, and their efficiency, along with Python implementations.</p>"},{"location":"concepts/algorithms/searching/#types-of-searching-algorithms","title":"Types of Searching Algorithms","text":""},{"location":"concepts/algorithms/searching/#1-linear-search","title":"1. Linear Search","text":"<p>Linear search, or sequential search, is the simplest searching algorithm. It checks each element in a list one by one until the desired item is found or the list ends.</p> <p>Complexity: - Time: O(n) - Space: O(1)</p> <p>Python Code:</p> <pre><code>def linear_search(arr, target):\n    for index, value in enumerate(arr):\n        if value == target:\n            return index  # Return the index of the found element\n    return -1  # Element not found\n</code></pre> <p>Use Cases: - Small or unsorted datasets - Situations where data is stored in a non-indexed format</p>"},{"location":"concepts/algorithms/searching/#2-binary-search","title":"2. Binary Search","text":"<p>Binary search is a more efficient algorithm that requires the data to be sorted beforehand. It divides the search interval in half repeatedly.</p> <p>Complexity: - Time: O(log n) - Space: O(1)</p> <p>Python Code:</p> <pre><code>def binary_search(arr, target):\n    low, high = 0, len(arr) - 1\n    while low &lt;= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid  # Return the index of the found element\n        elif arr[mid] &lt; target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1  # Element not found\n</code></pre> <p>Use Cases: - Sorted arrays or lists - Situations where quick search operations are needed</p>"},{"location":"concepts/algorithms/searching/#3-jump-search","title":"3. Jump Search","text":"<p>Jump search is an improvement over linear search, where you jump ahead by fixed steps and then perform a linear search within the block.</p> <p>Complexity: - Time: O(\u221an) - Space: O(1)</p> <p>Python Code:</p> <pre><code>import math\n\ndef jump_search(arr, target):\n    length = len(arr)\n    jump = int(math.sqrt(length))\n    prev = 0\n\n    while arr[min(jump, length) - 1] &lt; target:\n        prev = jump\n        jump += int(math.sqrt(length))\n        if prev &gt;= length:\n            return -1  # Element not found\n\n    for i in range(prev, min(jump, length)):\n        if arr[i] == target:\n            return i  # Return the index of the found element\n\n    return -1  # Element not found\n</code></pre> <p>Use Cases: - Sorted arrays where data access is costly</p>"},{"location":"concepts/algorithms/searching/#4-interpolation-search","title":"4. Interpolation Search","text":"<p>Interpolation search improves binary search for uniformly distributed datasets.</p> <p>Complexity: - Time: O(log log n) in the best case - Space: O(1)</p> <p>Python Code:</p> <pre><code>def interpolation_search(arr, target):\n    low, high = 0, len(arr) - 1\n    while low &lt;= high and target &gt;= arr[low] and target &lt;= arr[high]:\n        if low == high:\n            if arr[low] == target:\n                return low\n            return -1\n\n        pos = low + ((high - low) // (arr[high] - arr[low]) * (target - arr[low]))\n\n        if arr[pos] == target:\n            return pos  # Return the index of the found element\n        if arr[pos] &lt; target:\n            low = pos + 1\n        else:\n            high = pos - 1\n    return -1  # Element not found\n</code></pre> <p>Use Cases: - Large, sorted datasets where values are evenly distributed</p>"},{"location":"concepts/algorithms/searching/#5-exponential-search","title":"5. Exponential Search","text":"<p>Exponential search is useful for unbounded or infinite lists.</p> <p>Complexity: - Time: O(log n) - Space: O(1)</p> <p>Python Code:</p> <pre><code>def exponential_search(arr, target):\n    if arr[0] == target:\n        return 0\n\n    index = 1\n    while index &lt; len(arr) and arr[index] &lt;= target:\n        index *= 2\n\n    return binary_search(arr[:min(index, len(arr))], target)\n</code></pre> <p>Use Cases: - Unbounded arrays or scenarios where the size of the dataset is unknown</p>"},{"location":"concepts/algorithms/searching/#conclusion","title":"Conclusion","text":"<p>Searching algorithms play a crucial role in data retrieval and manipulation. Choosing the right algorithm depends on the size and nature of the dataset, as well as the specific requirements of the application. Understanding the strengths and weaknesses of each algorithm is essential for optimizing performance in data-heavy environments.</p> <ul> <li>Go back to Algorithms</li> <li>Return to Home</li> </ul>"},{"location":"concepts/algorithms/sorting/","title":"Sorting Algorithms","text":"<p>This file explains different sorting algorithms.</p> <p>Sorting algorithms are methods for arranging the elements of a list or array in a specific order, typically in ascending or descending order. Below, we will explore some of the most common sorting algorithms, their applications, and their efficiency, along with Python implementations.</p>"},{"location":"concepts/algorithms/sorting/#types-of-sorting-algorithms","title":"Types of Sorting Algorithms","text":""},{"location":"concepts/algorithms/sorting/#1-bubble-sort","title":"1. Bubble Sort","text":"<p>Bubble sort is a simple comparison-based algorithm that repeatedly steps through the list, compares adjacent elements, and swaps them if they are in the wrong order. </p> <p>Complexity: - Time: O(n\u00b2) - Space: O(1)</p> <p>Python Code:</p> <pre><code>def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n - i - 1):\n            if arr[j] &gt; arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n    return arr\n</code></pre> <p>Use Cases: - Small datasets - Educational purposes to illustrate sorting concepts</p>"},{"location":"concepts/algorithms/sorting/#2-selection-sort","title":"2. Selection Sort","text":"<p>Selection sort divides the input list into two parts: a sorted and an unsorted region. It repeatedly selects the smallest (or largest) element from the unsorted part and moves it to the sorted part.</p> <p>Complexity: - Time: O(n\u00b2) - Space: O(1)</p> <p>Python Code:</p> <pre><code>def selection_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        min_index = i\n        for j in range(i + 1, n):\n            if arr[j] &lt; arr[min_index]:\n                min_index = j\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n    return arr\n</code></pre> <p>Use Cases: - Small datasets - Situations where memory usage is a concern</p>"},{"location":"concepts/algorithms/sorting/#3-insertion-sort","title":"3. Insertion Sort","text":"<p>Insertion sort builds a sorted array one element at a time. It takes each element from the unsorted list and finds its correct position in the sorted part.</p> <p>Complexity: - Time: O(n\u00b2) - Space: O(1)</p> <p>Python Code:</p> <pre><code>def insertion_sort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i - 1\n        while j &gt;= 0 and key &lt; arr[j]:\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = key\n    return arr\n</code></pre> <p>Use Cases: - Small datasets - Nearly sorted data</p>"},{"location":"concepts/algorithms/sorting/#4-merge-sort","title":"4. Merge Sort","text":"<p>Merge sort is a divide-and-conquer algorithm that divides the array into halves, sorts them, and then merges the sorted halves back together.</p> <p>Complexity: - Time: O(n log n) - Space: O(n)</p> <p>Python Code:</p> <pre><code>def merge_sort(arr):\n    if len(arr) &gt; 1:\n        mid = len(arr) // 2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n\n        merge_sort(left_half)\n        merge_sort(right_half)\n\n        i = j = k = 0\n\n        while i &lt; len(left_half) and j &lt; len(right_half):\n            if left_half[i] &lt; right_half[j]:\n                arr[k] = left_half[i]\n                i += 1\n            else:\n                arr[k] = right_half[j]\n                j += 1\n            k += 1\n\n        while i &lt; len(left_half):\n            arr[k] = left_half[i]\n            i += 1\n            k += 1\n\n        while j &lt; len(right_half):\n            arr[k] = right_half[j]\n            j += 1\n            k += 1\n\n    return arr\n</code></pre> <p>Use Cases: - Large datasets - Stable sorting is required</p>"},{"location":"concepts/algorithms/sorting/#5-quick-sort","title":"5. Quick Sort","text":"<p>Quick sort is another divide-and-conquer algorithm that selects a 'pivot' element and partitions the array around it, sorting the elements on either side of the pivot.</p> <p>Complexity: - Time: O(n log n) on average, O(n\u00b2) in the worst case - Space: O(log n)</p> <p>Python Code:</p> <pre><code>def quick_sort(arr):\n    if len(arr) &lt;= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x &lt; pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x &gt; pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n</code></pre> <p>Use Cases: - Large datasets - Situations where average-case performance is critical</p>"},{"location":"concepts/algorithms/sorting/#conclusion","title":"Conclusion","text":"<p>Sorting algorithms are fundamental in computer science and data processing. The choice of sorting algorithm can significantly affect performance, depending on the size and nature of the data. Understanding the strengths and weaknesses of each algorithm is essential for efficient data management.</p> <ul> <li>Go back to Algorithms</li> <li>Return to Home</li> </ul>"},{"location":"concepts/cyber-security/","title":"Cyber Security","text":"<p>This section covers various Cyber Security Concepts and tools:</p> <ul> <li>Cyber Security</li> </ul> <p>Go back to Home.</p>"},{"location":"concepts/cyber-security/cyber-security/","title":"Cyber Security","text":""},{"location":"concepts/cyber-security/cyber-security/#cyber-security","title":"Cyber Security","text":"<p>Add content here</p>"},{"location":"concepts/data-structures/","title":"Data Structures","text":"<p>This section covers common data structures:</p> <ul> <li>Binary Tree</li> <li>Linked List</li> </ul> <p>Go back to Home.</p>"},{"location":"concepts/data-structures/binary-tree/","title":"Binary Tree","text":"<p>An overview of binary trees.</p> <ul> <li>Go back to Data Structures</li> <li>Return to Home</li> </ul> <p>A binary tree is a data structure in which each node has at most two children. It is commonly used for searching and sorting operations in computer science.</p>"},{"location":"concepts/data-structures/linked-list/","title":"Linked List","text":"<p>An explanation of linked lists.</p> <ul> <li>Go back to Data Structures</li> <li>Return to Home</li> </ul> <p>A linked list is a linear data structure where each element (node) contains a reference to the next node in the sequence. This structure allows for efficient insertion and deletion of elements.</p>"},{"location":"concepts/frameworks/","title":"Frameworks","text":"<p>This section covers various Frameworks:</p> <ul> <li>Django</li> <li>Spring Boot</li> </ul> <p>Go back to Home.</p>"},{"location":"concepts/frameworks/django-quickstart/","title":"Django Quickstart","text":""},{"location":"concepts/frameworks/django-quickstart/#django-quickstart","title":"Django Quickstart","text":""},{"location":"concepts/frameworks/django-quickstart/#1-install-python","title":"1. Install Python","text":"<p>First, ensure you have Python installed. You can check your version with:</p> <pre><code>python --version\n</code></pre> <p>If you don\u2019t have Python, download and install it from python.org.</p>"},{"location":"concepts/frameworks/django-quickstart/#2-create-a-virtual-environment","title":"2. Create a Virtual Environment","text":"<p>Navigate to your desired project directory and create a virtual environment:</p> <pre><code>mkdir myprojectdir\ncd myprojectdir\npython -m venv myenv\n</code></pre> <p>Activate the virtual environment:</p> <ul> <li>On Windows:</li> </ul> <p><code>bash   myenv\\Scripts\\activate</code></p> <ul> <li>On macOS/Linux:</li> </ul> <p><code>bash   source myenv/bin/activate</code></p>"},{"location":"concepts/frameworks/django-quickstart/#3-install-django","title":"3. Install Django","text":"<p>With your virtual environment activated, install Django using pip:</p> <pre><code>pip install django\n</code></pre>"},{"location":"concepts/frameworks/django-quickstart/#4-create-a-new-project","title":"4. Create a New Project","text":"<p>To create a new Django project, use the <code>django-admin</code> command:</p> <pre><code>django-admin startproject myproject\n</code></pre> <p>This creates a new directory named <code>myproject</code> with the following structure:</p> <pre><code>myproject/\n    manage.py\n    myproject/\n        __init__.py\n        settings.py\n        urls.py\n        asgi.py\n        wsgi.py\n</code></pre>"},{"location":"concepts/frameworks/django-quickstart/#5-run-the-development-server","title":"5. Run the Development Server","text":"<p>Navigate to your project directory:</p> <pre><code>cd myproject\n</code></pre> <p>Run the development server:</p> <pre><code>python manage.py runserver\n</code></pre> <p>You should see output indicating the server is running, usually at <code>http://127.0.0.1:8000/</code>. Open this URL in your web browser to see the Django welcome page.</p>"},{"location":"concepts/frameworks/django-quickstart/#6-create-a-new-app","title":"6. Create a New App","text":"<p>Django projects are made up of apps. To create an app, run:</p> <pre><code>python manage.py startapp myapp\n</code></pre> <p>This creates a new directory called <code>myapp</code> with the following structure:</p> <pre><code>myapp/\n    migrations/\n    __init__.py\n    admin.py\n    apps.py\n    models.py\n    tests.py\n    views.py\n</code></pre>"},{"location":"concepts/frameworks/django-quickstart/#7-define-a-model","title":"7. Define a Model","text":"<p>In <code>myapp/models.py</code>, define a simple model. For example:</p> <pre><code>from django.db import models\n\nclass Item(models.Model):\n    name = models.CharField(max_length=100)\n    description = models.TextField()\n\n    def __str__(self):\n        return self.name\n</code></pre>"},{"location":"concepts/frameworks/django-quickstart/#8-register-the-model-with-admin","title":"8. Register the Model with Admin","text":"<p>To manage this model in the Django admin interface, register it in <code>myapp/admin.py</code>:</p> <pre><code>from django.contrib import admin\nfrom .models import Item\n\nadmin.site.register(Item)\n</code></pre>"},{"location":"concepts/frameworks/django-quickstart/#9-configure-the-app","title":"9. Configure the App","text":"<p>Add your app to the project's settings. In <code>myproject/settings.py</code>, find the <code>INSTALLED_APPS</code> list and add your app:</p> <pre><code>INSTALLED_APPS = [\n    # other apps\n    'myapp',\n]\n</code></pre>"},{"location":"concepts/frameworks/django-quickstart/#10-create-the-database","title":"10. Create the Database","text":"<p>Run the following commands to create the database and apply migrations:</p> <pre><code>python manage.py makemigrations\npython manage.py migrate\n</code></pre>"},{"location":"concepts/frameworks/django-quickstart/#11-create-an-admin-user","title":"11. Create an Admin User","text":"<p>Create a superuser to access the admin panel:</p> <pre><code>python manage.py createsuperuser\n</code></pre> <p>Follow the prompts to set up your admin user.</p>"},{"location":"concepts/frameworks/django-quickstart/#12-access-the-admin-interface","title":"12. Access the Admin Interface","text":"<p>Start the server again if it's not running:</p> <pre><code>python manage.py runserver\n</code></pre> <p>Visit <code>http://127.0.0.1:8000/admin/</code> and log in with the superuser credentials. You should see your <code>Item</code> model listed.</p>"},{"location":"concepts/frameworks/django-quickstart/#13-create-a-view","title":"13. Create a View","text":"<p>In <code>myapp/views.py</code>, create a simple view:</p> <pre><code>from django.shortcuts import render\nfrom .models import Item\n\ndef item_list(request):\n    items = Item.objects.all()\n    return render(request, 'item_list.html', {'items': items})\n</code></pre>"},{"location":"concepts/frameworks/django-quickstart/#14-set-up-urls","title":"14. Set Up URLs","text":"<p>In <code>myapp/urls.py</code>, set up a URL for your view:</p> <pre><code>from django.urls import path\nfrom .views import item_list\n\nurlpatterns = [\n    path('', item_list, name='item_list'),\n]\n</code></pre> <p>Then, include your app\u2019s URLs in the project\u2019s URLs. In <code>myproject/urls.py</code>, add:</p> <pre><code>from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('myapp.urls')),\n]\n</code></pre>"},{"location":"concepts/frameworks/django-quickstart/#15-create-a-template","title":"15. Create a Template","text":"<p>Create a directory named <code>templates</code> in your <code>myapp</code> folder and create a file named <code>item_list.html</code> inside it:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Item List&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Item List&lt;/h1&gt;\n    &lt;ul&gt;\n        {% for item in items %}\n            &lt;li&gt;{{ item.name }}: {{ item.description }}&lt;/li&gt;\n        {% endfor %}\n    &lt;/ul&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"concepts/frameworks/django-quickstart/#16-test-your-app","title":"16. Test Your App","text":"<p>Now, navigate to <code>http://127.0.0.1:8000/</code> in your browser to see the list of items. If you add items through the admin interface, they should appear here.</p>"},{"location":"concepts/frameworks/django-quickstart/#conclusion","title":"Conclusion","text":"<p>You've created a simple Django application with a virtual environment, model, admin interface, view, and template. From here, you can explore more features like forms, authentication, and deploying your application.</p> <p>For more detailed documentation, visit the official Django documentation at djangoproject.com. Happy coding!</p>"},{"location":"concepts/frameworks/spring-boot-quickstart/","title":"Spring Boot Quickstart","text":""},{"location":"concepts/frameworks/spring-boot-quickstart/#spring-boot-quickstart","title":"Spring Boot Quickstart","text":""},{"location":"concepts/frameworks/spring-boot-quickstart/#1-install-prerequisites","title":"1. Install Prerequisites","text":"<p>Make sure you have the following installed:</p> <ul> <li>Java Development Kit (JDK): Version 8 or higher. Check if it's installed:</li> </ul> <p><code>bash   java -version</code></p> <p>Download it from oracle.com if necessary.</p> <ul> <li>Maven: A build tool for Java projects. Check if it's installed:</li> </ul> <p><code>bash   mvn -version</code></p> <p>Download it from maven.apache.org if needed.</p>"},{"location":"concepts/frameworks/spring-boot-quickstart/#2-create-a-new-spring-boot-project","title":"2. Create a New Spring Boot Project","text":"<p>Use the Spring Initializr to generate a new Spring Boot project:</p> <ol> <li>Go to start.spring.io.</li> <li>Choose Maven Project.</li> <li>Select your preferred Java version.</li> <li>Fill in the Group and Artifact (e.g., <code>com.example</code> and <code>demo</code>).</li> <li>Select Dependencies:</li> <li>Spring Web</li> <li>Spring Data JPA</li> <li>H2 Database (for an in-memory database)</li> <li>Click Generate to download a ZIP file containing your project.</li> </ol>"},{"location":"concepts/frameworks/spring-boot-quickstart/#3-extract-and-navigate-to-your-project","title":"3. Extract and Navigate to Your Project","text":"<p>Unzip the downloaded file and navigate to the project directory:</p> <pre><code>cd demo\n</code></pre>"},{"location":"concepts/frameworks/spring-boot-quickstart/#4-open-the-project-in-your-ide","title":"4. Open the Project in Your IDE","text":"<p>Open the project in your favorite IDE (like IntelliJ IDEA or Eclipse). If using IntelliJ, import the project as a Maven project.</p>"},{"location":"concepts/frameworks/spring-boot-quickstart/#5-create-a-simple-model","title":"5. Create a Simple Model","text":"<p>In <code>src/main/java/com/example/demo</code>, create a class called <code>Item.java</code>:</p> <pre><code>package com.example.demo;\n\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\n\n@Entity\npublic class Item {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    private String name;\n    private String description;\n\n    // Getters and setters\n    public Long getId() { return id; }\n    public void setId(Long id) { this.id = id; }\n    public String getName() { return name; }\n    public void setName(String name) { this.name = name; }\n    public String getDescription() { return description; }\n    public void setDescription(String description) { this.description = description; }\n}\n</code></pre>"},{"location":"concepts/frameworks/spring-boot-quickstart/#6-create-a-repository","title":"6. Create a Repository","text":"<p>Create an interface called <code>ItemRepository.java</code>:</p> <pre><code>package com.example.demo;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\n\npublic interface ItemRepository extends JpaRepository&lt;Item, Long&gt; {\n}\n</code></pre>"},{"location":"concepts/frameworks/spring-boot-quickstart/#7-create-a-controller","title":"7. Create a Controller","text":"<p>Create a class called <code>ItemController.java</code>:</p> <pre><code>package com.example.demo;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/items\")\npublic class ItemController {\n\n    @Autowired\n    private ItemRepository itemRepository;\n\n    @GetMapping\n    public List&lt;Item&gt; getAllItems() {\n        return itemRepository.findAll();\n    }\n\n    @PostMapping\n    public Item createItem(@RequestBody Item item) {\n        return itemRepository.save(item);\n    }\n}\n</code></pre>"},{"location":"concepts/frameworks/spring-boot-quickstart/#8-run-the-application","title":"8. Run the Application","text":"<p>Run the main class located at <code>src/main/java/com/example/demo/DemoApplication.java</code>:</p> <pre><code>package com.example.demo;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class DemoApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(DemoApplication.class, args);\n    }\n}\n</code></pre> <p>You can run the application via your IDE or using Maven:</p> <pre><code>mvn spring-boot:run\n</code></pre>"},{"location":"concepts/frameworks/spring-boot-quickstart/#9-test-your-api-with-postman","title":"9. Test Your API with Postman","text":"<p>GET All Items:</p> <ol> <li>Open Postman.</li> <li>Set the request type to GET.</li> <li>Enter the URL: <code>http://localhost:8080/items</code>.</li> <li>Click Send.</li> <li>You should see an empty array (<code>[]</code>) as no items have been added yet.</li> </ol> <p>POST a New Item:</p> <ol> <li>Change the request type to POST.</li> <li>Enter the URL: <code>http://localhost:8080/items</code>.</li> <li>Go to the Body tab.</li> <li>Select raw and choose JSON from the dropdown.</li> <li>Enter the following JSON:</li> </ol> <p><code>json    {        \"name\": \"Item1\",        \"description\": \"This is Item 1\"    }</code></p> <ol> <li>Click Send.</li> <li>You should see the created item in the response, including its ID.</li> </ol> <p>Verify Item Creation:</p> <ol> <li>Set the request type to GET.</li> <li>Enter the URL: <code>http://localhost:8080/items</code>.</li> <li>Click Send.</li> <li>You should see the list with your newly created item.</li> </ol>"},{"location":"concepts/frameworks/spring-boot-quickstart/#conclusion","title":"Conclusion","text":"<p>You've successfully created a Spring Boot application with a model, repository, and RESTful controller. You also tested your API using Postman. </p> <p>For more detailed documentation, visit the official Spring Boot documentation at spring.io. Happy coding!</p>"},{"location":"concepts/languages/","title":"Programming Languages","text":"<p>This section covers various programming languages:</p> <ul> <li>JavaScript</li> <li>Python</li> </ul> <p>Go back to Home.</p>"},{"location":"concepts/languages/javascript/","title":"JavaScript","text":"<p>A guide to JavaScript programming.</p> <ul> <li>Go back to Languages</li> <li>Return to Home</li> </ul> <p>JavaScript is a high-level programming language primarily used for creating interactive and dynamic content on websites. It allows developers to implement complex features on web pages.</p>"},{"location":"concepts/languages/python/","title":"Python","text":"<p>A guide to Python programming.</p> <p>Python is a versatile and high-level programming language known for its readability and simplicity. It is widely used in various domains, including web development, data analysis, and artificial intelligence.</p>"},{"location":"concepts/languages/python/#hello-world","title":"Hello, World!","text":"<p>The most basic program in Python is the \"Hello, World!\" program, which outputs the string \"Hello, World!\" to the console.</p> <pre><code>print(\"Hello, World!\")\n</code></pre>"},{"location":"concepts/languages/python/#variables","title":"Variables","text":"<p>In Python, variables are used to store data values. You don't need to declare the variable type explicitly, as Python is dynamically typed.</p>"},{"location":"concepts/languages/python/#example-of-variable-assignment","title":"Example of Variable Assignment","text":"<pre><code># Example of variable assignment\nname = \"Alice\"   # String variable\nage = 30         # Integer variable\nheight = 5.7     # Float variable\n\nprint(name, age, height)\n</code></pre>"},{"location":"concepts/languages/python/#data-types","title":"Data Types","text":"<p>Python has several built-in data types, including: - Strings: Textual data, e.g., <code>\"Hello\"</code> - Integers: Whole numbers, e.g., <code>42</code> - Floats: Decimal numbers, e.g., <code>3.14</code> - Lists: Ordered collections, e.g., <code>[1, 2, 3]</code> - Dictionaries: Key-value pairs, e.g., <code>{\"key\": \"value\"}</code></p>"},{"location":"concepts/languages/python/#example-simple-list","title":"Example: Simple List","text":"<p>Here's how to create and manipulate a list in Python:</p> <pre><code># Creating a list\nfruits = [\"apple\", \"banana\", \"cherry\"]\n\n# Accessing list elements\nprint(fruits[0])  # Outputs: apple\n\n# Adding an element\nfruits.append(\"orange\")\n\n# Looping through the list\nfor fruit in fruits:\n    print(fruit)\n</code></pre>"},{"location":"concepts/languages/python/#example-function-definition","title":"Example: Function Definition","text":"<p>Functions in Python are defined using the <code>def</code> keyword. Here's a simple function that adds two numbers:</p> <pre><code>def add_numbers(a, b):\n    return a + b\n\nresult = add_numbers(5, 3)\nprint(result)  # Outputs: 8\n</code></pre>"},{"location":"concepts/languages/python/#add-other-docs","title":"Add other docs","text":"<ul> <li>Go back to Languages</li> <li>Return to Home</li> </ul>"},{"location":"concepts/libraries/web_scraping/","title":"Programming Languages","text":"<p>This section covers various web scraping techniques:</p> <ul> <li>Selenium </li> </ul> <p>Go back to Home.</p>"},{"location":"concepts/libraries/web_scraping/selenium/","title":"Selenium","text":""},{"location":"concepts/libraries/web_scraping/selenium/#introduction-to-selenium","title":"Introduction to Selenium","text":"<p>Selenium is a powerful tool for automating web browsers. It is widely used for automating web applications for testing purposes, but it can also be used for web scraping and automating routine web tasks. In this guide, we'll walk you through setting up Selenium with Python and performing basic web automation tasks. The documentation assumes you have basic Python knowledge.</p>"},{"location":"concepts/libraries/web_scraping/selenium/#1-prerequisites","title":"1. Prerequisites","text":"<p>Before getting started with Selenium, make sure you have the following: - Basic knowledge of Python (working with variables, functions, loops, etc.) - Python installed on your computer (preferably Python 3) - Web browser (e.g., Chrome, Firefox)</p>"},{"location":"concepts/libraries/web_scraping/selenium/#install-required-packages","title":"Install Required Packages","text":"<p>Selenium can be installed easily via pip. Open your terminal or command prompt and type the following:</p> <pre><code>pip install selenium\n</code></pre> <p>Additionally, you will need a WebDriver to interact with a specific browser.</p>"},{"location":"concepts/libraries/web_scraping/selenium/#webdriver-setup","title":"WebDriver Setup","text":"<ul> <li>Chrome: Download the ChromeDriver that matches your version of Chrome.</li> <li>Firefox: Download the GeckoDriver for Firefox.</li> </ul> <p>After downloading the WebDriver, add it to your system PATH or specify its path in your code.</p>"},{"location":"concepts/libraries/web_scraping/selenium/#2-getting-started-with-selenium","title":"2. Getting Started with Selenium","text":""},{"location":"concepts/libraries/web_scraping/selenium/#importing-selenium","title":"Importing Selenium","text":"<p>To use Selenium in your Python script, import it as follows:</p> <pre><code>from selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys\nimport time\n</code></pre>"},{"location":"concepts/libraries/web_scraping/selenium/#starting-a-web-browser","title":"Starting a Web Browser","text":"<p>To start a browser session, instantiate the WebDriver:</p> <pre><code># Using Chrome\ndriver = webdriver.Chrome(executable_path='path/to/chromedriver')\n\n# Using Firefox\n# driver = webdriver.Firefox(executable_path='path/to/geckodriver')\n\n# Open a website\ndriver.get(\"https://www.example.com\")\n</code></pre>"},{"location":"concepts/libraries/web_scraping/selenium/#basic-operations","title":"Basic Operations","text":"<ol> <li>Open a Webpage:</li> </ol> <pre><code>driver.get(\"https://www.google.com\")\n</code></pre> <ol> <li>Maximize the Browser Window:</li> </ol> <pre><code>driver.maximize_window()\n</code></pre> <ol> <li>Interacting with Web Elements:</li> </ol> <p>You can interact with elements on a web page, such as entering text into input fields, clicking buttons, etc.</p> <p>Finding elements:</p> <pre><code>search_box = driver.find_element(By.NAME, \"q\")  # Finding an element by name\nsearch_box.send_keys(\"Selenium Python\")        # Typing into the search box\nsearch_box.send_keys(Keys.RETURN)              # Pressing Enter\n</code></pre> <p>Clicking a button:</p> <pre><code>button = driver.find_element(By.ID, \"buttonID\")\nbutton.click()\n</code></pre> <ol> <li>Waiting for Elements to Load: Sometimes, elements on a webpage may not load immediately. You can make Selenium wait for an element to appear before interacting with it.</li> </ol> <pre><code>from selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\n\n# Wait for an element to be present (max wait time: 10 seconds)\nelement = WebDriverWait(driver, 10).until(\n    EC.presence_of_element_located((By.ID, \"elementID\"))\n)\n</code></pre> <ol> <li>Handling Delays:</li> </ol> <p>If you want the script to wait for a specific amount of time:</p> <pre><code>time.sleep(5)  # Wait for 5 seconds\n</code></pre>"},{"location":"concepts/libraries/web_scraping/selenium/#3-common-selenium-commands","title":"3. Common Selenium Commands","text":"<p>Here are some of the most commonly used commands in Selenium:</p> <ul> <li>Find Element by ID:</li> </ul> <p><code>python   element = driver.find_element(By.ID, \"element_id\")</code></p> <ul> <li>Find Element by Name:</li> </ul> <p><code>python   element = driver.find_element(By.NAME, \"element_name\")</code></p> <ul> <li>Find Element by Class Name:</li> </ul> <p><code>python   element = driver.find_element(By.CLASS_NAME, \"class_name\")</code></p> <ul> <li>Find Element by CSS Selector:</li> </ul> <p><code>python   element = driver.find_element(By.CSS_SELECTOR, \".class_name #id_name\")</code></p> <ul> <li>Find Element by XPATH:</li> </ul> <p><code>python   element = driver.find_element(By.XPATH, \"//tag[@attribute='value']\")</code></p> <ul> <li>Click an Element:</li> </ul> <p><code>python   element.click()</code></p> <ul> <li>Enter Text into a Field:</li> </ul> <p><code>python   element.send_keys(\"Your text here\")</code></p> <ul> <li>Clear Input Field:</li> </ul> <p><code>python   element.clear()</code></p>"},{"location":"concepts/libraries/web_scraping/selenium/#4-navigating-through-pages","title":"4. Navigating Through Pages","text":"<p>You can use the following commands to navigate through the web:</p> <ul> <li>Go to a URL:</li> </ul> <p><code>python   driver.get(\"https://www.example.com\")</code></p> <ul> <li>Navigate Back:</li> </ul> <p><code>python   driver.back()</code></p> <ul> <li>Navigate Forward:</li> </ul> <p><code>python   driver.forward()</code></p> <ul> <li>Refresh the Page:</li> </ul> <p><code>python   driver.refresh()</code></p>"},{"location":"concepts/libraries/web_scraping/selenium/#5-handling-alerts-and-pop-ups","title":"5. Handling Alerts and Pop-ups","text":"<p>If a website has alerts or pop-ups, you can handle them using:</p> <ul> <li>Accepting an Alert:</li> </ul> <p><code>python   alert = driver.switch_to.alert   alert.accept()</code></p> <ul> <li>Dismissing an Alert:</li> </ul> <p><code>python   alert = driver.switch_to.alert   alert.dismiss()</code></p>"},{"location":"concepts/libraries/web_scraping/selenium/#6-closing-the-browser","title":"6. Closing the Browser","text":"<p>Once you've completed your automation tasks, it\u2019s important to close the browser:</p> <pre><code>driver.quit()\n</code></pre>"},{"location":"concepts/libraries/web_scraping/selenium/#7-complete-example-google-search-automation","title":"7. Complete Example: Google Search Automation","text":"<p>Here's a full example that demonstrates opening Google, searching for something, and closing the browser.</p> <pre><code>from selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys\nimport time\n\n# Start the WebDriver (Chrome in this case)\ndriver = webdriver.Chrome(executable_path=\"path/to/chromedriver\")\n\n# Open Google\ndriver.get(\"https://www.google.com\")\n\n# Find the search box\nsearch_box = driver.find_element(By.NAME, \"q\")\n\n# Type in search query\nsearch_box.send_keys(\"Selenium Python\")\n\n# Press Enter\nsearch_box.send_keys(Keys.RETURN)\n\n# Wait for 5 seconds to see the results\ntime.sleep(5)\n\n# Close the browser\ndriver.quit()\n</code></pre>"},{"location":"concepts/libraries/web_scraping/selenium/#8-best-practices","title":"8. Best Practices","text":"<ul> <li>Always make sure the WebDriver version matches your browser version.</li> <li>Use waits (<code>WebDriverWait</code> or <code>time.sleep()</code>) to ensure elements load correctly before interacting.</li> <li>After interacting with a web element, verify that the action was successful (e.g., by checking the page content).</li> </ul>"},{"location":"concepts/libraries/web_scraping/selenium/#additional-resources","title":"Additional Resources","text":"<ul> <li>Selenium Python Documentation</li> <li>Selenium WebDriver API Reference</li> </ul> <p>This guide covers the basics of Selenium with Python. By practicing these steps, you can automate web browsers for a variety of purposes, such as testing and web scraping.</p>"},{"location":"concepts/machine-learning/","title":"Machine Learning","text":"<p>This section covers various machine learning concepts:</p> <ul> <li>Machine Learning Basics</li> </ul> <p>Go back to Home.</p>"},{"location":"concepts/machine-learning/machine-learning/","title":"Machine Learning Basics","text":"<p>Machine Learning (ML) is a subset of artificial intelligence (AI) that focuses on building systems that can learn from data and make decisions or predictions based on that data. It involves the use of algorithms and statistical models to enable computers to improve their performance on tasks over time without being explicitly programmed.</p>"},{"location":"concepts/machine-learning/machine-learning/#hello-world-of-machine-learning","title":"Hello, World! of Machine Learning","text":"<p>A simple introduction to ML can be through a basic example using a dataset to train a model and make predictions. Here's a basic example using the popular Python library, scikit-learn, to train a simple model:</p> <pre><code>from sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score\n\n# Load the Iris dataset\ndata = load_iris()\nX = data.data\ny = data.target\n\n# Split the data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\n# Create and train a k-NN classifier\nmodel = KNeighborsClassifier(n_neighbors=3)\nmodel.fit(X_train, y_train)\n\n# Make predictions\npredictions = model.predict(X_test)\n\n# Evaluate the model\naccuracy = accuracy_score(y_test, predictions)\nprint(f\"Accuracy: {accuracy:.2f}\")\n</code></pre>"},{"location":"concepts/machine-learning/machine-learning/#core-concepts","title":"Core Concepts","text":""},{"location":"concepts/machine-learning/machine-learning/#algorithms","title":"Algorithms","text":"<p>Machine Learning algorithms are the core components that learn from data. Some common algorithms include:</p> <ul> <li>Linear Regression: Predicts a continuous value based on input features.</li> <li>Logistic Regression: Used for binary classification problems.</li> <li>Decision Trees: Makes decisions based on the features of the data.</li> <li>k-Nearest Neighbors (k-NN): Classifies data based on the nearest neighbors.</li> <li>Support Vector Machines (SVM): Finds the best boundary between classes.</li> </ul>"},{"location":"concepts/machine-learning/machine-learning/#data-preparation","title":"Data Preparation","text":"<p>Data preparation is a crucial step in ML and involves:</p> <ul> <li>Data Cleaning: Handling missing values, removing duplicates, and correcting errors.</li> <li>Feature Engineering: Creating new features or modifying existing ones to improve model performance.</li> <li>Normalization/Standardization: Scaling features to a standard range or distribution.</li> </ul>"},{"location":"concepts/machine-learning/machine-learning/#model-evaluation","title":"Model Evaluation","text":"<p>Evaluating a machine learning model involves assessing its performance using metrics such as:</p> <ul> <li>Accuracy: The proportion of correctly classified instances.</li> <li>Precision and Recall: Measures of classification performance for imbalanced datasets.</li> <li>F1 Score: The harmonic mean of precision and recall.</li> <li>Confusion Matrix: A table showing true positives, false positives, true negatives, and false negatives.</li> </ul>"},{"location":"concepts/machine-learning/machine-learning/#example-simple-linear-regression","title":"Example: Simple Linear Regression","text":"<p>Here\u2019s a basic example of how to implement and use a Linear Regression model with scikit-learn:</p> <pre><code>from sklearn.linear_model import LinearRegression\nimport numpy as np\n\n# Sample data: Hours studied vs. Scores\nX = np.array([[1], [2], [3], [4], [5]])\ny = np.array([2, 4, 6, 8, 10])\n\n# Create and train the model\nmodel = LinearRegression()\nmodel.fit(X, y)\n\n# Make a prediction\npredicted_score = model.predict([[6]])\nprint(f\"Predicted score for 6 hours of study: {predicted_score[0]:.2f}\")\n</code></pre> <p>This example demonstrates how to fit a linear regression model to a dataset and make predictions based on it.</p> <ul> <li>Return to Home</li> </ul>"}]}